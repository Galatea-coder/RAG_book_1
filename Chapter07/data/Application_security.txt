Measures taken to improve the security of an application Application security short AppSec  includes all tasks that introduce a secure software development life cycle to development teams. Its final goal is to improve security practices and through that to find fix and preferably prevent security issues within applications. It encompasses the whole application life cycle from requirements analysis design implementation verification as well as maintenance.  1  Web application security is a branch of information security that deals specifically with the security of websites  web applications  and web services . At a high level web application security draws on the principles of application security but applies them specifically to the internet and web systems.  2   3  The application security also concentrates on mobile apps and their security which includes iOS and Android Applications Web Application Security Tools are specialized tools for working with HTTP traffic e.g. Web application firewalls . Approaches  edit  Different approaches will find different subsets of the security vulnerabilities lurking in an application and are most effective at different times in the software lifecycle. They each represent different tradeoffs of time effort cost and vulnerabilities found. Design review . Before code is written the applications architecture and design can be reviewed for security problems. A common technique in this phase is the creation of a threat model . Whitebox security review or code review . This is a security engineer deeply understanding the application through manually reviewing the source code and noticing security flaws. Through comprehension of the application vulnerabilities unique to the application can be found. Blackbox security audit . This is only through the use of an application testing it for security vulnerabilities no source code is required. Automated Tooling. Many security tools can be automated through inclusion into the development or testing environment. Examples of those are automated DASTSAST tools that are integrated into code editor or CICD platforms. Coordinated vulnerability platforms . These are hackerpowered application security solutions offered by many websites and software developers by which individuals can receive recognition and compensation for reporting bugs. Security threats  edit  The Open Worldwide Application Security Project  OWASP  provides free and open resources. It is led by a nonprofit called The OWASP Foundation. The OWASP Top 10  2017 results from recent research based on comprehensive data compiled from over 40 partner organizations. This data revealed approximately 2.3 million vulnerabilities across over 50000 applications.  4  According to the OWASP Top 10  2021 the ten most critical web application security risks include  5  Broken access control Cryptographic failures Injection Insecure design Security misconfiguration Vulnerable and outdated components Identification and authentification failures Software and data integrity failures Security logging and monitoring failures Serverside request forgery SSRF Security controls  edit  The OWASP Top 10 Proactive Controls 2024 is a list of security techniques every software architect and developer should know and heed. The current list contains Implement access control Use cryptography the proper way Validate all input  handle exceptions Address security from the start Secure by default configurations Keep your components secure Implement digital identity Use browser security features Implement security logging and monitoring Stop serverside request forgery Tooling for security testing  edit  Security testing techniques scour for vulnerabilities or security holes in applications. These vulnerabilities leave applications open to exploitation . Ideally security testing is implemented throughout the entire software development life cycle SDLC so that vulnerabilities may be addressed in a timely and thorough manner. There are many kinds of automated tools for identifying vulnerabilities in applications. Common tool categories used for identifying application vulnerabilities include Static application security testing SAST analyzes source code for security vulnerabilities during an applications development. Compared to DAST SAST can be utilized even before the application is in an executable state. As SAST has access to the full source code it is a whitebox approach. This can yield more detailed results but can result in many false positives that need to be manually verified. Dynamic application security testing DAST often called vulnerability scanners  automatically detects vulnerabilities by crawling and analyzing websites. This method is highly scalable easily integrated and quick. DAST tools are well suited for dealing with lowlevel attacks such as injection flaws but are not well suited to detect highlevel flaws e.g. logic or business logic flaws.  6  Fuzzing tools are commonly used for input testing.  7  Interactive application security testing IAST assesses applications from within using software instrumentation. This combines the strengths of both SAST and DAST methods as well as providing access to code HTTP traffic library information backend connections and configuration information.  8   9  Some IAST products require the application to be attacked while others can be used during normal quality assurance testing.  10   promotional source   11   promotional source  Runtime application selfprotection augments existing applications to provide intrusion detection and prevention from within an application runtime. Dependency scanners also called software composition analysis  try to detect the usage of software components with known vulnerabilities. These tools can either work ondemand e.g. during the source code build process or periodically. Security standards and regulations  edit  CERT Secure Coding standard ISOIEC 2703412011 Information technology  Security techniques  Application security  Part 1 Overview and concepts ISOIEC TR 247722013 Information technology  Programming languages  Guidance to avoiding vulnerabilities in programming languages through language selection and use NIST Special Publication 80053 OWASP ASVS Web Application Security Verification Standard  12  See also  edit  Common Weakness Enumeration Data security Mobile security OWASP Microsoft Security Development Lifecycle Usable security References  edit   Happe Andreas 3 June 2021. What is AppSec anyways . snikt.net .  Web Application Security Overview . 20151023.  Shuaibu Bala Musa Norwawi Norita Md Selamat Mohd Hasan AlAlwani Abdulkareem 20130117. Systematic review of web application security development model. Artificial Intelligence Review . 43 2 259 276. doi  10.1007s1046201293756 . ISSN 02692821 . S2CID 15221613 .  Korolov Maria Apr 27 2017. Latest OWASP Top 10 looks at APIs web apps The new OWASP Top 10 list is out and while most of it remains the same there are new additions focusing on web applications and APIs. CSO . ProQuest 1892694046 .  OWASP Top 10  2021 The Ten Most Critical Web Application Security Risks . Open Web Application Security Project . 2021 . Retrieved January 11 2022 .  Web Application Vulnerability Scanners . NIST.  Fuzzing . OWASP.  Williams Jeff 2 July 2015. I Understand SAST and DAST But What is an IAST and Why Does it Matter . Contrast Security . Retrieved 10 April 2018 .  Velasco Roberto 7 May 2020. What is IAST All About Interactive Application Security Testing . Hdiv Security . Retrieved 7 May 2020 .  Abezgauz Irene February 17 2014. Introduction to Interactive Application Security Testing . Quotium. Archived from the original on April 3 2018 . Retrieved January 25 2018 .  Rohr Matthias November 26 2015. IAST A New Approach For Agile Security Testing . Secodis.  OWASP Application Security Verification Standard . v t e Information security Related security categories Computer security Automotive security Cybercrime Cybersex trafficking Computer fraud Cybergeddon Cyberterrorism Cyberwarfare Electromagnetic warfare Information warfare Internet security Mobile security Network security Copy protection Digital rights management vectorial version Threats Adware Advanced persistent threat Arbitrary code execution Backdoors Bombs Fork Logic Time Zip Hardware backdoors Code injection Crimeware Crosssite scripting Crosssite leaks DOM clobbering History sniffing Cryptojacking Botnets Data breach Driveby download Browser Helper Objects Viruses Data scraping Denialofservice attack Eavesdropping Email fraud Email spoofing Exploits Fraudulent dialers Hacktivism Infostealer Insecure direct object reference Keystroke loggers Malware Payload Phishing Voice Polymorphic engine Privilege escalation Ransomware Rootkits Scareware Shellcode Spamming Social engineering Spyware Software bugs Trojan horses Hardware Trojans Remote access trojans Vulnerability Web shells Wiper Worms SQL injection Rogue security software Zombie Defenses Application security Secure coding Secure by default Secure by design Misuse case Computer access control Authentication Multifactor authentication Authorization Computer security software Antivirus software Securityfocused operating system Datacentric security Obfuscation software Data masking Encryption Firewall Intrusion detection system Hostbased intrusion detection system HIDS Anomaly detection Information security management Information risk management Security information and event management SIEM Runtime application selfprotection Site isolation